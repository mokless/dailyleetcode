class TrieNode {
    TrieNode[] next = new TrieNode[26];
    String word;
    
    public TrieNode build(String[] words) {
        TrieNode root = new TrieNode();
        for (String word : words) {
            TrieNode node = root;
            for (char c : word.toCharArray()) {
                if (node.next[c-'a'] == null) {
                    node.next[c-'a'] = new TrieNode();
                }
                node = node.next[c-'a'];
            }
            
            node.word = word;
        }
        
        return root;
    }
}

class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        if (board == null || board.length == 0 || words == null || words.length == 0) {
            return new ArrayList<>();
        }
        TrieNode root = new TrieNode().build(words);
        List<String> ans = new ArrayList<>();
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                backtracking(board, i, j, root, ans);
            }
        }
        
        return ans;
    }
    
    public void backtracking(char[][] board, int row, int col, TrieNode node, List<String> ans) {
        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || board[row][col] == '*') {
            return;
        }
        
        char c = board[row][col];
        
        if (node.next[c-'a'] == null) {
            return;
        }
        TrieNode parent = node;
        node = node.next[c-'a'];
        
        if (node.word != null) {
            ans.add(node.word);
            node.word = null;
        }
        
        board[row][col] = '*';
        
        backtracking(board, row - 1, col, node, ans);
        backtracking(board, row + 1, col, node, ans);
        backtracking(board, row, col - 1, node, ans);
        backtracking(board, row, col + 1, node, ans);
        
        board[row][col] = c;
        
        for (int i = 0; i < 26; i++) {
            if (parent.next[i] != null) {
                return;
            }
        }
        
        parent.next[c-'a'] = null;
        
    }
}
